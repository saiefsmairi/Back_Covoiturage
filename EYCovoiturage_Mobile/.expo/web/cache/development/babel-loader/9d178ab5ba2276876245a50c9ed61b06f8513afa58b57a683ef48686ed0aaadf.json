{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useRef as $eCAIO$useRef, useEffect as $eCAIO$useEffect, useMemo as $eCAIO$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $eCAIO$getFocusableTreeWalker, focusSafely as $eCAIO$focusSafely } from \"@react-aria/focus\";\nimport { focusWithoutScrolling as $eCAIO$focusWithoutScrolling, useEvent as $eCAIO$useEvent, scrollIntoView as $eCAIO$scrollIntoView, scrollIntoViewport as $eCAIO$scrollIntoViewport, mergeProps as $eCAIO$mergeProps, isAppleDevice as $eCAIO$isAppleDevice, isMac as $eCAIO$isMac } from \"@react-aria/utils\";\nimport { getInteractionModality as $eCAIO$getInteractionModality, usePress as $eCAIO$usePress, useLongPress as $eCAIO$useLongPress } from \"@react-aria/interactions\";\nimport { useLocale as $eCAIO$useLocale, useCollator as $eCAIO$useCollator } from \"@react-aria/i18n\";\nfunction $feb5ffebff200149$export$d3e3bd3e26688c04(e) {\n  return (0, $eCAIO$isAppleDevice)() ? e.altKey : e.ctrlKey;\n}\nfunction $feb5ffebff200149$export$16792effe837dba3(e) {\n  if ((0, $eCAIO$isMac)()) return e.metaKey;\n  return e.ctrlKey;\n}\nvar $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000;\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  var keyboardDelegate = options.keyboardDelegate,\n    selectionManager = options.selectionManager,\n    onTypeSelect = options.onTypeSelect;\n  var state = (0, $eCAIO$useRef)({\n    search: \"\",\n    timeout: null\n  }).current;\n  var onKeyDown = function onKeyDown(e) {\n    var character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) return;\n    if (character === \" \" && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!(\"continuePropagation\" in e)) e.stopPropagation();\n    }\n    state.search += character;\n    var key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function () {\n      state.search = \"\";\n    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n  return {\n    typeSelectProps: {\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return \"\";\n}\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  var manager = options.selectionManager,\n    delegate = options.keyboardDelegate,\n    ref = options.ref,\n    _options$autoFocus = options.autoFocus,\n    autoFocus = _options$autoFocus === void 0 ? false : _options$autoFocus,\n    _options$shouldFocusW = options.shouldFocusWrap,\n    shouldFocusWrap = _options$shouldFocusW === void 0 ? false : _options$shouldFocusW,\n    _options$disallowEmpt = options.disallowEmptySelection,\n    disallowEmptySelection = _options$disallowEmpt === void 0 ? false : _options$disallowEmpt,\n    _options$disallowSele = options.disallowSelectAll,\n    disallowSelectAll = _options$disallowSele === void 0 ? false : _options$disallowSele,\n    _options$selectOnFocu = options.selectOnFocus,\n    selectOnFocus = _options$selectOnFocu === void 0 ? manager.selectionBehavior === \"replace\" : _options$selectOnFocu,\n    _options$disallowType = options.disallowTypeAhead,\n    disallowTypeAhead = _options$disallowType === void 0 ? false : _options$disallowType,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    _options$allowsTabNav = options.allowsTabNavigation,\n    allowsTabNavigation = _options$allowsTabNav === void 0 ? false : _options$allowsTabNav,\n    isVirtualized = options.isVirtualized,\n    _options$scrollRef = options.scrollRef,\n    scrollRef = _options$scrollRef === void 0 ? ref : _options$scrollRef;\n  var _ref = (0, $eCAIO$useLocale)(),\n    direction = _ref.direction;\n  var onKeyDown = function onKeyDown(e) {\n    if (e.altKey && e.key === \"Tab\") e.preventDefault();\n    if (!ref.current.contains(e.target)) return;\n    var navigateToKey = function navigateToKey(key, childFocus) {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n        if (e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case \"ArrowDown\":\n        if (delegate.getKeyBelow) {\n          var _delegate_getFirstKey, _delegate_getFirstKey1;\n          e.preventDefault();\n          var nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"ArrowUp\":\n        if (delegate.getKeyAbove) {\n          var _delegate_getLastKey, _delegate_getLastKey1;\n          e.preventDefault();\n          var nextKey1 = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);\n          if (nextKey1 == null && shouldFocusWrap) nextKey1 = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey1);\n        }\n        break;\n      case \"ArrowLeft\":\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          var nextKey2 = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey2, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          var nextKey3 = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey3, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          var firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(firstKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          var lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(lastKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          var nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey4);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          var nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey5);\n        }\n        break;\n      case \"a\":\n        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === \"multiple\" && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n      case \"Tab\":\n        if (!allowsTabNavigation) {\n          if (e.shiftKey) ref.current.focus();else {\n            var walker = (0, $eCAIO$getFocusableTreeWalker)(ref.current, {\n              tabbable: true\n            });\n            var next;\n            var last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) (0, $eCAIO$focusWithoutScrolling)(next);\n          }\n          break;\n        }\n    }\n  };\n  var scrollPos = (0, $eCAIO$useRef)({\n    top: 0,\n    left: 0\n  });\n  (0, $eCAIO$useEvent)(scrollRef, \"scroll\", isVirtualized ? null : function () {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n  var onFocus = function onFocus(e) {\n    if (manager.isFocused) {\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      var navigateToFirstKey = function navigateToFirstKey(key) {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      var relatedTarget = e.relatedTarget;\n      var _manager_lastSelectedKey, _manager_firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n    if (!isVirtualized && manager.focusedKey != null) {\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n      if (element) {\n        (0, $eCAIO$focusWithoutScrolling)(element);\n        (0, $eCAIO$scrollIntoView)(scrollRef.current, element);\n      }\n    }\n  };\n  var onBlur = function onBlur(e) {\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  var autoFocusRef = (0, $eCAIO$useRef)(autoFocus);\n  (0, $eCAIO$useEffect)(function () {\n    if (autoFocusRef.current) {\n      var focusedKey = null;\n      if (autoFocus === \"first\") focusedKey = delegate.getFirstKey();\n      if (autoFocus === \"last\") focusedKey = delegate.getLastKey();\n      var selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      if (focusedKey == null && !shouldUseVirtualFocus) (0, $eCAIO$focusSafely)(ref.current);\n    }\n    autoFocusRef.current = false;\n  }, []);\n  (0, $eCAIO$useEffect)(function () {\n    var modality = (0, $eCAIO$getInteractionModality)();\n    if (!isVirtualized && manager.isFocused && manager.focusedKey != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n      if (element) {\n        (0, $eCAIO$scrollIntoView)(scrollRef.current, element);\n        if (modality === \"keyboard\") (0, $eCAIO$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey, manager.isFocused, ref]);\n  var handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown: function onMouseDown(e) {\n      if (scrollRef.current === e.target) e.preventDefault();\n    }\n  };\n  var _ref2 = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({\n      keyboardDelegate: delegate,\n      selectionManager: manager\n    }),\n    typeSelectProps = _ref2.typeSelectProps;\n  if (!disallowTypeAhead) handlers = (0, $eCAIO$mergeProps)(typeSelectProps, handlers);\n  var tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: _objectSpread(_objectSpread({}, handlers), {}, {\n      tabIndex: tabIndex\n    })\n  };\n}\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  var manager = options.selectionManager,\n    key = options.key,\n    ref = options.ref,\n    shouldSelectOnPressUp = options.shouldSelectOnPressUp,\n    isVirtualized = options.isVirtualized,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    focus = options.focus,\n    isDisabled = options.isDisabled,\n    onAction = options.onAction,\n    allowsDifferentPressOrigin = options.allowsDifferentPressOrigin;\n  var onSelect = function onSelect(e) {\n    if (e.pointerType === \"keyboard\" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === \"none\") return;\n      if (manager.selectionMode === \"single\") {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === \"toggle\" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === \"touch\" || e.pointerType === \"virtual\")) manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  (0, $eCAIO$useEffect)(function () {\n    var isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n      if (focus) focus();else if (document.activeElement !== ref.current) (0, $eCAIO$focusSafely)(ref.current);\n    }\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  var itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus: function onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = function (e) {\n    e.preventDefault();\n  };\n  var allowsSelection = !isDisabled && manager.canSelectItem(key);\n  var allowsActions = onAction && !isDisabled;\n  var hasPrimaryAction = allowsActions && (manager.selectionBehavior === \"replace\" ? !allowsSelection : manager.isEmpty);\n  var hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === \"replace\";\n  var hasAction = hasPrimaryAction || hasSecondaryAction;\n  var modality = (0, $eCAIO$useRef)(null);\n  var longPressEnabled = hasAction && allowsSelection;\n  var longPressEnabledOnPressStart = (0, $eCAIO$useRef)(false);\n  var hadPrimaryActionOnPressStart = (0, $eCAIO$useRef)(false);\n  var itemPressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === \"keyboard\" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = function (e) {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== \"mouse\") {\n        if (e.pointerType === \"keyboard\" && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        onAction();\n      } else if (e.pointerType !== \"keyboard\") onSelect(e);\n    };else {\n      itemPressProps.onPressUp = function (e) {\n        if (e.pointerType !== \"keyboard\") onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? function () {\n        return onAction();\n      } : null;\n    }\n  } else {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      if (e.pointerType === \"mouse\" && !hasPrimaryAction || e.pointerType === \"keyboard\" && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    itemPressProps.onPress = function (e) {\n      if (e.pointerType === \"touch\" || e.pointerType === \"pen\" || e.pointerType === \"virtual\" || e.pointerType === \"keyboard\" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === \"mouse\" && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) onAction();else onSelect(e);\n      }\n    };\n  }\n  if (!isVirtualized) itemProps[\"data-key\"] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  var _ref3 = (0, $eCAIO$usePress)(itemPressProps),\n    pressProps = _ref3.pressProps,\n    isPressed = _ref3.isPressed;\n  var onDoubleClick = hasSecondaryAction ? function (e) {\n    if (modality.current === \"mouse\") {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n  var _ref4 = (0, $eCAIO$useLongPress)({\n      isDisabled: !longPressEnabled,\n      onLongPress: function onLongPress(e) {\n        if (e.pointerType === \"touch\") {\n          onSelect(e);\n          manager.setSelectionBehavior(\"toggle\");\n        }\n      }\n    }),\n    longPressProps = _ref4.longPressProps;\n  var onDragStartCapture = function onDragStartCapture(e) {\n    if (modality.current === \"touch\" && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  return {\n    itemProps: (0, $eCAIO$mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \"Enter\";\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \" \" || (event === null || event === void 0 ? void 0 : event.code) === \"Space\";\n}\nvar $2a25aae57d74318e$export$a05409b8bb224a5a = function () {\n  function $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledKeys, ref, collator) {\n    _classCallCheck(this, $2a25aae57d74318e$export$a05409b8bb224a5a);\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n  _createClass($2a25aae57d74318e$export$a05409b8bb224a5a, [{\n    key: \"getKeyBelow\",\n    value: function getKeyBelow(key) {\n      key = this.collection.getKeyAfter(key);\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n      return null;\n    }\n  }, {\n    key: \"getKeyAbove\",\n    value: function getKeyAbove(key) {\n      key = this.collection.getKeyBefore(key);\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n      return null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var key = this.collection.getFirstKey();\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n      return null;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var key = this.collection.getLastKey();\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n      return null;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.ref.current.querySelector(\"[data-key=\\\"\" + key + \"\\\"]\");\n    }\n  }, {\n    key: \"getKeyPageAbove\",\n    value: function getKeyPageAbove(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n      while (item && item.offsetTop > pageY) {\n        key = this.getKeyAbove(key);\n        item = key == null ? null : this.getItem(key);\n      }\n      return key;\n    }\n  }, {\n    key: \"getKeyPageBelow\",\n    value: function getKeyPageBelow(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n      while (item && item.offsetTop < pageY) {\n        key = this.getKeyBelow(key);\n        item = key == null ? null : this.getItem(key);\n      }\n      return key;\n    }\n  }, {\n    key: \"getKeyForSearch\",\n    value: function getKeyForSearch(search, fromKey) {\n      if (!this.collator) return null;\n      var collection = this.collection;\n      var key = fromKey || this.getFirstKey();\n      while (key != null) {\n        var item = collection.getItem(key);\n        var substring = item.textValue.slice(0, search.length);\n        if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n        key = this.getKeyBelow(key);\n      }\n      return null;\n    }\n  }]);\n  return $2a25aae57d74318e$export$a05409b8bb224a5a;\n}();\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  var selectionManager = props.selectionManager,\n    collection = props.collection,\n    disabledKeys = props.disabledKeys,\n    ref = props.ref,\n    keyboardDelegate = props.keyboardDelegate,\n    autoFocus = props.autoFocus,\n    shouldFocusWrap = props.shouldFocusWrap,\n    isVirtualized = props.isVirtualized,\n    disallowEmptySelection = props.disallowEmptySelection,\n    _props$selectOnFocus = props.selectOnFocus,\n    selectOnFocus = _props$selectOnFocus === void 0 ? selectionManager.selectionBehavior === \"replace\" : _props$selectOnFocus,\n    disallowTypeAhead = props.disallowTypeAhead,\n    shouldUseVirtualFocus = props.shouldUseVirtualFocus,\n    allowsTabNavigation = props.allowsTabNavigation;\n  var collator = (0, $eCAIO$useCollator)({\n    usage: \"search\",\n    sensitivity: \"base\"\n  });\n  var disabledBehavior = selectionManager.disabledBehavior;\n  var delegate = (0, $eCAIO$useMemo)(function () {\n    return keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)(collection, disabledBehavior === \"selection\" ? new Set() : disabledKeys, ref, collator);\n  }, [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n  var _ref5 = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({\n      ref: ref,\n      selectionManager: selectionManager,\n      keyboardDelegate: delegate,\n      autoFocus: autoFocus,\n      shouldFocusWrap: shouldFocusWrap,\n      disallowEmptySelection: disallowEmptySelection,\n      selectOnFocus: selectOnFocus,\n      disallowTypeAhead: disallowTypeAhead,\n      shouldUseVirtualFocus: shouldUseVirtualFocus,\n      allowsTabNavigation: allowsTabNavigation,\n      isVirtualized: isVirtualized,\n      scrollRef: ref\n    }),\n    collectionProps = _ref5.collectionProps;\n  return {\n    listProps: collectionProps\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection, $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem, $982254629710d113$export$b95089534ab7c1fd as useSelectableList, $2a25aae57d74318e$export$a05409b8bb224a5a as ListKeyboardDelegate, $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"names":["$feb5ffebff200149$export$d3e3bd3e26688c04","e","$eCAIO$isAppleDevice","altKey","ctrlKey","$feb5ffebff200149$export$16792effe837dba3","$eCAIO$isMac","metaKey","$fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS","$fb3050f43d946246$export$e32c88dfddc6e1d8","options","keyboardDelegate","selectionManager","onTypeSelect","state","$eCAIO$useRef","search","timeout","current","onKeyDown","character","$fb3050f43d946246$var$getStringForKey","key","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","$ae20dd8cbca75726$export$d6daf82dcd84e87c","manager","delegate","ref","_options$autoFocus","autoFocus","_options$shouldFocusW","shouldFocusWrap","_options$disallowEmpt","disallowEmptySelection","_options$disallowSele","disallowSelectAll","_options$selectOnFocu","selectOnFocus","selectionBehavior","_options$disallowType","disallowTypeAhead","shouldUseVirtualFocus","_options$allowsTabNav","allowsTabNavigation","isVirtualized","_options$scrollRef","scrollRef","_ref","$eCAIO$useLocale","direction","contains","target","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","_delegate_getFirstKey","_delegate_getFirstKey1","nextKey","getFirstKey","call","getKeyAbove","_delegate_getLastKey","_delegate_getLastKey1","nextKey1","getLastKey","getKeyLeftOf","nextKey2","getKeyRightOf","nextKey3","firstKey","lastKey","getKeyPageBelow","nextKey4","getKeyPageAbove","nextKey5","selectAll","clearSelection","focus","walker","$eCAIO$getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","$eCAIO$focusWithoutScrolling","scrollPos","top","left","$eCAIO$useEvent","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","_manager_lastSelectedKey","_manager_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","querySelector","$eCAIO$scrollIntoView","onBlur","autoFocusRef","$eCAIO$useEffect","selectedKeys","size","values","value","$eCAIO$focusSafely","modality","$eCAIO$getInteractionModality","$eCAIO$scrollIntoViewport","containingElement","handlers","onMouseDown","_ref2","$eCAIO$mergeProps","tabIndex","collectionProps","_objectSpread","$880e95eb8b93ba9a$export$ecf600387e221c37","shouldSelectOnPressUp","isDisabled","onAction","allowsDifferentPressOrigin","onSelect","pointerType","toggleSelection","isSelected","childFocusStrategy","itemProps","allowsSelection","canSelectItem","allowsActions","hasPrimaryAction","isEmpty","hasSecondaryAction","hasAction","longPressEnabled","longPressEnabledOnPressStart","hadPrimaryActionOnPressStart","itemPressProps","onPressStart","$880e95eb8b93ba9a$var$isSelectionKey","onPress","$880e95eb8b93ba9a$var$isActionKey","onPressUp","preventFocusOnPress","_ref3","$eCAIO$usePress","pressProps","isPressed","onDoubleClick","undefined","_ref4","$eCAIO$useLongPress","onLongPress","setSelectionBehavior","longPressProps","onDragStartCapture","event","window","code","$2a25aae57d74318e$export$a05409b8bb224a5a","collection","disabledKeys","collator","_classCallCheck","_createClass","getKeyAfter","item","getItem","type","has","getKeyBefore","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","substring","textValue","slice","compare","$982254629710d113$export$b95089534ab7c1fd","props","_props$selectOnFocus","$eCAIO$useCollator","usage","sensitivity","disabledBehavior","$eCAIO$useMemo","Set","_ref5","listProps"],"sources":["C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\index.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableCollection.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\utils.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useTypeSelect.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableItem.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableList.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\ListKeyboardDelegate.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useSelectableCollection} from './useSelectableCollection';\nexport {useSelectableItem} from './useSelectableItem';\nexport {useSelectableList} from './useSelectableList';\nexport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nexport {useTypeSelect} from './useTypeSelect';\n\nexport type {AriaSelectableCollectionOptions, SelectableCollectionAria} from './useSelectableCollection';\nexport type {AriaSelectableListOptions, SelectableListAria} from './useSelectableList';\nexport type {SelectableItemOptions, SelectableItemStates, SelectableItemAria} from './useSelectableItem';\nexport type {AriaTypeSelectOptions, TypeSelectAria} from './useTypeSelect';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {FocusEvent, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, scrollIntoViewport, useEvent} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n\n    if (!isVirtualized && manager.focusedKey != null) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    let modality = getInteractionModality();\n    if (!isVirtualized && manager.isFocused && manager.focusedKey != null && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n        if (modality === 'keyboard') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey, manager.isFocused, ref]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {Key, KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent, PressEvent} from '@react-types/shared';\nimport {focusSafely} from '@react-aria/focus';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {Key, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n      if (focus) {\n        focus();\n      } else if (document.activeElement !== ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus && !isDisabled) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  } else if (isDisabled) {\n    itemProps.onMouseDown = (e) => {\n      // Prevent focus going to the body when clicking on a disabled item.\n      e.preventDefault();\n    };\n  }\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          onAction();\n        } else if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n        (e.pointerType === 'keyboard' && (!onAction || isSelectionKey()))\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, DOMAttributes, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\nexport interface AriaSelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === 'replace',\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator)\n  ), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return null;\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n\n    return null;\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return null;\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n\n    return null;\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = key == null ? null : this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = key == null ? null : this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}