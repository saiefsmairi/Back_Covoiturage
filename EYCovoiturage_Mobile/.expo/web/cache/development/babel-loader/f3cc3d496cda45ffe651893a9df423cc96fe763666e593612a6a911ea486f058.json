{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { filterDOMProps as $kOq5K$filterDOMProps, mergeProps as $kOq5K$mergeProps } from \"@react-aria/utils\";\nimport { useField as $kOq5K$useField } from \"@react-aria/label\";\nimport { useFocusable as $kOq5K$useFocusable } from \"@react-aria/focus\";\nimport { useRef as $kOq5K$useRef, useEffect as $kOq5K$useEffect } from \"react\";\nfunction $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {\n  var _props$inputElementTy = props.inputElementType,\n    inputElementType = _props$inputElementTy === void 0 ? \"input\" : _props$inputElementTy,\n    _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$isRequired = props.isRequired,\n    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n    _props$isReadOnly = props.isReadOnly,\n    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n    validationState = props.validationState,\n    _props$type = props.type,\n    type = _props$type === void 0 ? \"text\" : _props$type,\n    _props$onChange = props.onChange,\n    _onChange = _props$onChange === void 0 ? function () {} : _props$onChange;\n  var _ref = (0, $kOq5K$useFocusable)(props, ref),\n    focusableProps = _ref.focusableProps;\n  var _ref2 = (0, $kOq5K$useField)(props),\n    labelProps = _ref2.labelProps,\n    fieldProps = _ref2.fieldProps,\n    descriptionProps = _ref2.descriptionProps,\n    errorMessageProps = _ref2.errorMessageProps;\n  var domProps = (0, $kOq5K$filterDOMProps)(props, {\n    labelable: true\n  });\n  var inputOnlyProps = {\n    type: type,\n    pattern: props.pattern\n  };\n  return {\n    labelProps: labelProps,\n    inputProps: (0, $kOq5K$mergeProps)(domProps, inputElementType === \"input\" && inputOnlyProps, _objectSpread(_objectSpread({\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      \"aria-required\": isRequired || undefined,\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-activedescendant\": props[\"aria-activedescendant\"],\n      \"aria-autocomplete\": props[\"aria-autocomplete\"],\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      value: props.value,\n      defaultValue: props.value ? undefined : props.defaultValue,\n      onChange: function onChange(e) {\n        return _onChange(e.target.value);\n      },\n      autoComplete: props.autoComplete,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n      onSelect: props.onSelect,\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput\n    }, focusableProps), fieldProps)),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\nfunction $d841c8010a73d545$var$supportsNativeBeforeInputEvent() {\n  return typeof window !== \"undefined\" && window.InputEvent && typeof InputEvent.prototype.getTargetRanges === \"function\";\n}\nfunction $d841c8010a73d545$export$4f384c9210e583c3(props, state, inputRef) {\n  var stateRef = (0, $kOq5K$useRef)(state);\n  stateRef.current = state;\n  (0, $kOq5K$useEffect)(function () {\n    if (!$d841c8010a73d545$var$supportsNativeBeforeInputEvent()) return;\n    var input = inputRef.current;\n    var onBeforeInput = function onBeforeInput(e) {\n      var state = stateRef.current;\n      var nextValue;\n      switch (e.inputType) {\n        case \"historyUndo\":\n        case \"historyRedo\":\n          return;\n        case \"deleteContent\":\n        case \"deleteByCut\":\n        case \"deleteByDrag\":\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case \"deleteContentForward\":\n          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case \"deleteContentBackward\":\n          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case \"deleteSoftLineBackward\":\n        case \"deleteHardLineBackward\":\n          nextValue = input.value.slice(input.selectionStart);\n          break;\n        default:\n          if (e.data != null) nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);\n          break;\n      }\n      if (nextValue == null || !state.validate(nextValue)) e.preventDefault();\n    };\n    input.addEventListener(\"beforeinput\", onBeforeInput, false);\n    return function () {\n      input.removeEventListener(\"beforeinput\", onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n  var onBeforeInput = !$d841c8010a73d545$var$supportsNativeBeforeInputEvent() ? function (e) {\n    var nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);\n    if (!state.validate(nextValue)) e.preventDefault();\n  } : null;\n  var _ref3 = (0, $2d73ec29415bd339$export$712718f7aec83d5)(props, inputRef),\n    labelProps = _ref3.labelProps,\n    textFieldProps = _ref3.inputProps,\n    descriptionProps = _ref3.descriptionProps,\n    errorMessageProps = _ref3.errorMessageProps;\n  var compositionStartState = (0, $kOq5K$useRef)(null);\n  return {\n    inputProps: (0, $kOq5K$mergeProps)(textFieldProps, {\n      onBeforeInput: onBeforeInput,\n      onCompositionStart: function onCompositionStart() {\n        var _inputRef$current = inputRef.current,\n          value = _inputRef$current.value,\n          selectionStart = _inputRef$current.selectionStart,\n          selectionEnd = _inputRef$current.selectionEnd;\n        compositionStartState.current = {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        };\n      },\n      onCompositionEnd: function onCompositionEnd() {\n        if (!state.validate(inputRef.current.value)) {\n          var _compositionStartStat = compositionStartState.current,\n            value = _compositionStartStat.value,\n            selectionStart = _compositionStartStat.selectionStart,\n            selectionEnd = _compositionStartStat.selectionEnd;\n          inputRef.current.value = value;\n          inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n          state.setInputValue(value);\n        }\n      }\n    }),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\nexport { $2d73ec29415bd339$export$712718f7aec83d5 as useTextField, $d841c8010a73d545$export$4f384c9210e583c3 as useFormattedTextField };","map":{"version":3,"names":["$2d73ec29415bd339$export$712718f7aec83d5","props","ref","_props$inputElementTy","inputElementType","_props$isDisabled","isDisabled","_props$isRequired","isRequired","_props$isReadOnly","isReadOnly","validationState","_props$type","type","_props$onChange","onChange","_ref","$kOq5K$useFocusable","focusableProps","_ref2","$kOq5K$useField","labelProps","fieldProps","descriptionProps","errorMessageProps","domProps","$kOq5K$filterDOMProps","labelable","inputOnlyProps","pattern","inputProps","$kOq5K$mergeProps","_objectSpread","disabled","readOnly","undefined","value","defaultValue","e","target","autoComplete","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput","$d841c8010a73d545$var$supportsNativeBeforeInputEvent","window","InputEvent","prototype","getTargetRanges","$d841c8010a73d545$export$4f384c9210e583c3","state","inputRef","stateRef","$kOq5K$useRef","current","$kOq5K$useEffect","input","nextValue","inputType","slice","selectionStart","selectionEnd","data","validate","preventDefault","addEventListener","removeEventListener","_ref3","textFieldProps","compositionStartState","_inputRef$current","_compositionStartStat","setSelectionRange","setInputValue"],"sources":["C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\index.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useTextField.ts","C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useFormattedTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {TextFieldAria} from './useTextField';\nexport {useTextField} from './useTextField';\nexport {useFormattedTextField} from './useFormattedTextField';\nexport type {AriaTextFieldOptions} from './useTextField';\nexport type {AriaTextFieldProps} from '@react-types/textfield';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {\n  ChangeEvent,\n  DOMFactory,\n  HTMLAttributes,\n  LabelHTMLAttributes,\n  ReactDOM,\n  RefObject\n} from 'react';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useField} from '@react-aria/label';\nimport {useFocusable} from '@react-aria/focus';\n\n/**\n * A map of HTML element names and their interface types.\n * For example `'a'` -> `HTMLAnchorElement`.\n */\ntype IntrinsicHTMLElements = {\n  [K in keyof IntrinsicHTMLAttributes]: IntrinsicHTMLAttributes[K] extends HTMLAttributes<infer T> ? T : never\n};\n\n/**\n * A map of HTML element names and their attribute interface types.\n * For example `'a'` -> `AnchorHTMLAttributes<HTMLAnchorElement>`.\n */\ntype IntrinsicHTMLAttributes = {\n  [K in keyof ReactDOM]: ReactDOM[K] extends DOMFactory<infer T, any> ? T : never\n};\n\ntype DefaultElementType = 'input';\n\n/**\n * The intrinsic HTML element names that `useTextField` supports; e.g. `input`,\n * `textarea`.\n */\ntype TextFieldIntrinsicElements = keyof Pick<IntrinsicHTMLElements, 'input' | 'textarea'>;\n\n/**\n * The HTML element interfaces that `useTextField` supports based on what is\n * defined for `TextFieldIntrinsicElements`; e.g. `HTMLInputElement`,\n * `HTMLTextAreaElement`.\n */\ntype TextFieldHTMLElementType = Pick<IntrinsicHTMLElements, TextFieldIntrinsicElements>;\n\n/**\n * The HTML attributes interfaces that `useTextField` supports based on what\n * is defined for `TextFieldIntrinsicElements`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldHTMLAttributesType = Pick<IntrinsicHTMLAttributes, TextFieldIntrinsicElements>;\n\n/**\n * The type of `inputProps` returned by `useTextField`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldInputProps<T extends TextFieldIntrinsicElements> = TextFieldHTMLAttributesType[T];\n\nexport interface AriaTextFieldOptions<T extends TextFieldIntrinsicElements> extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: T\n}\n\n/**\n * The type of `ref` object that can be passed to `useTextField` based on the given\n * intrinsic HTML element name; e.g.`RefObject<HTMLInputElement>`,\n * `RefObject<HTMLTextAreaElement>`.\n */\ntype TextFieldRefObject<T extends TextFieldIntrinsicElements> = RefObject<TextFieldHTMLElementType[T]>;\n\nexport interface TextFieldAria<T extends TextFieldIntrinsicElements = DefaultElementType> {\n  /** Props for the input element. */\n  inputProps: TextFieldInputProps<T>,\n  /** Props for the text field's visible label element, if any. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField<T extends TextFieldIntrinsicElements = DefaultElementType>(\n  props: AriaTextFieldOptions<T>,\n  ref: TextFieldRefObject<T>\n): TextFieldAria<T> {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  }: AriaTextFieldOptions<TextFieldIntrinsicElements> = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    ),\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n\n  let stateRef = useRef(state);\n  stateRef.current = state;\n\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n\n    let onBeforeInput = (e: InputEvent) => {\n      let state = stateRef.current;\n\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue: string;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteSoftLineBackward':\n        case 'deleteHardLineBackward':\n          nextValue = input.value.slice(input.selectionStart);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue =\n              input.value.slice(0, input.selectionStart) +\n              e.data +\n              input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}