{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\nvar AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left'\n};\nvar FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n};\nvar CROSS_AXIS = {\n  top: 'left',\n  left: 'top'\n};\nvar AXIS_SIZE = {\n  top: 'height',\n  left: 'width'\n};\nvar PARSED_PLACEMENT_CACHE = {};\nvar visualViewport = typeof window !== 'undefined' && window.visualViewport;\nfunction getContainerDimensions(containerNode) {\n  var width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  var scroll = {};\n  if (containerNode.tagName === 'BODY') {\n    var _visualViewport$width, _visualViewport$heigh;\n    width = (_visualViewport$width = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.width) !== null && _visualViewport$width !== void 0 ? _visualViewport$width : document.documentElement.clientWidth;\n    height = (_visualViewport$heigh = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.height) !== null && _visualViewport$heigh !== void 0 ? _visualViewport$heigh : document.documentElement.clientHeight;\n    scroll.top = getScrollTop(ownerDocument(containerNode).documentElement) || getScrollTop(containerNode);\n    scroll.left = getScrollLeft(ownerDocument(containerNode).documentElement) || getScrollLeft(containerNode);\n  } else {\n    var _getOffset = getOffset(containerNode);\n    width = _getOffset.width;\n    height = _getOffset.height;\n    top = _getOffset.top;\n    left = _getOffset.left;\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n  return {\n    width: width,\n    height: height,\n    scroll: scroll,\n    top: top,\n    left: left\n  };\n}\nfunction getScroll(node) {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight\n  };\n}\nfunction getDelta(axis, offset, size, containerDimensions, padding) {\n  var containerScroll = containerDimensions.scroll[axis];\n  var containerHeight = containerDimensions[AXIS_SIZE[axis]];\n  var startEdgeOffset = offset - padding - containerScroll;\n  var endEdgeOffset = offset + padding - containerScroll + size;\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\nfunction getMargins(node) {\n  var style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0\n  };\n}\nfunction parsePlacement(input) {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n  var _input$split = input.split(' '),\n    _input$split2 = _slicedToArray(_input$split, 2),\n    placement = _input$split2[0],\n    crossPlacement = _input$split2[1];\n  var axis = AXIS[placement] || 'right';\n  var crossAxis = CROSS_AXIS[axis];\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n  var size = AXIS_SIZE[axis];\n  var crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement: placement,\n    crossPlacement: crossPlacement,\n    axis: axis,\n    crossAxis: crossAxis,\n    size: size,\n    crossSize: crossSize\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\nfunction computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {\n  var placement = placementInfo.placement,\n    crossPlacement = placementInfo.crossPlacement,\n    axis = placementInfo.axis,\n    crossAxis = placementInfo.crossAxis,\n    size = placementInfo.size,\n    crossSize = placementInfo.crossSize;\n  var position = {};\n  position[crossAxis] = childOffset[crossAxis];\n  if (crossPlacement === 'center') {\n    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  }\n  position[crossAxis] += crossOffset;\n  var minViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2 - overlaySize[crossSize];\n  var maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;\n  position[crossAxis] = Math.min(Math.max(minViablePosition, position[crossAxis]), maxViablePosition);\n  if (placement === axis) {\n    var containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n  return position;\n}\nfunction getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {\n  return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding)) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding));\n}\nfunction getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {\n  var placement = placementInfo.placement,\n    axis = placementInfo.axis,\n    size = placementInfo.size;\n  if (placement === axis) {\n    return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n  }\n  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n}\nexport function calculatePositionInternal(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, shouldOverlapWithTrigger) {\n  var placementInfo = parsePlacement(placementInput);\n  var _placementInfo = placementInfo,\n    size = _placementInfo.size,\n    crossAxis = _placementInfo.crossAxis,\n    crossSize = _placementInfo.crossSize,\n    placement = _placementInfo.placement,\n    crossPlacement = _placementInfo.crossPlacement,\n    axis = _placementInfo.axis;\n  var position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  var normalizedOffset = offset;\n  var space = getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);\n  if (flip && scrollSize[size] > space) {\n    var flippedPlacementInfo = parsePlacement(FLIPPED_DIRECTION[placement] + \" \" + crossPlacement);\n    var flippedPosition = computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n    var flippedSpace = getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n  var delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  var maxHeight = getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n  position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  var arrowPosition = {};\n  arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] = position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n  return {\n    position: position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement\n  };\n}\nexport function calculatePosition(opts) {\n  var placement = opts.placement,\n    targetNode = opts.targetNode,\n    overlayNode = opts.overlayNode,\n    scrollNode = opts.scrollNode,\n    padding = opts.padding,\n    shouldFlip = opts.shouldFlip,\n    boundaryElement = opts.boundaryElement,\n    offset = opts.offset,\n    crossOffset = opts.crossOffset,\n    shouldOverlapWithTrigger = opts.shouldOverlapWithTrigger;\n  var container = overlayNode.offsetParent || document.body;\n  var isBodyContainer = container.tagName === 'BODY';\n  var containerPositionStyle = window.getComputedStyle(container).position;\n  var isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';\n  var childOffset = isBodyContainer ? getOffset(targetNode) : getPosition(targetNode, container);\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n  var overlaySize = getOffset(overlayNode);\n  var matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  var transform = matrix;\n  var regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  var matches = transform.match(regex);\n  var scaleX = 1;\n  var scaleY = 1;\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n  var margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n  var scrollSize = getScroll(scrollNode);\n  var boundaryDimensions = getContainerDimensions(boundaryElement);\n  var containerOffsetWithBoundary = boundaryElement.tagName === 'BODY' ? getOffset(container) : getPosition(container, boundaryElement);\n  return calculatePositionInternal(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, shouldOverlapWithTrigger);\n}","map":{"version":3,"names":["getCss","getOffset","getPosition","getScrollLeft","getScrollTop","ownerDocument","getComputedStyle","AXIS","top","bottom","left","right","FLIPPED_DIRECTION","CROSS_AXIS","AXIS_SIZE","PARSED_PLACEMENT_CACHE","visualViewport","window","getContainerDimensions","containerNode","width","height","scroll","tagName","_visualViewport$width","_visualViewport$heigh","document","documentElement","clientWidth","clientHeight","_getOffset","getScroll","node","scrollTop","scrollLeft","scrollWidth","scrollHeight","getDelta","axis","offset","size","containerDimensions","padding","containerScroll","containerHeight","startEdgeOffset","endEdgeOffset","Math","max","getMargins","style","parseInt","marginTop","marginBottom","marginLeft","marginRight","parsePlacement","input","_input$split","split","_input$split2","_slicedToArray","placement","crossPlacement","crossAxis","crossSize","computePosition","childOffset","boundaryDimensions","overlaySize","placementInfo","crossOffset","containerOffsetWithBoundary","isContainerPositioned","position","minViablePosition","maxViablePosition","min","floor","getMaxHeight","margins","getAvailableSpace","calculatePositionInternal","placementInput","scrollSize","flip","shouldOverlapWithTrigger","_placementInfo","normalizedOffset","space","flippedPlacementInfo","flippedPosition","flippedSpace","delta","maxHeight","arrowPosition","arrowOffsetLeft","arrowOffsetTop","calculatePosition","opts","targetNode","overlayNode","scrollNode","shouldFlip","boundaryElement","container","offsetParent","body","isBodyContainer","containerPositionStyle","matrix","getPropertyValue","transform","regex","matches","match","scaleX","scaleY","parseFloat","Number","isFinite"],"sources":["C:\\Users\\saief\\OneDrive\\Desktop\\front\\EYCovoiturage\\node_modules\\@react-native-aria\\overlays\\lib\\module\\web\\overlays\\src\\calculatePosition.ts"],"sourcesContent":["// @ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Axis,\n  Placement,\n  PlacementAxis,\n  SizeAxis,\n} from '@react-types/overlays';\nimport getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\n\ninterface Position {\n  top?: number;\n  left?: number;\n  bottom?: number;\n  right?: number;\n}\n\ninterface Dimensions {\n  width: number;\n  height: number;\n  top: number;\n  left: number;\n  scroll: Position;\n}\n\ninterface ParsedPlacement {\n  placement: PlacementAxis;\n  crossPlacement: PlacementAxis;\n  axis: Axis;\n  crossAxis: Axis;\n  size: SizeAxis;\n  crossSize: SizeAxis;\n}\n\ninterface Offset {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n\ninterface PositionOpts {\n  placement: Placement;\n  targetNode: HTMLElement;\n  overlayNode: HTMLElement;\n  scrollNode: HTMLElement;\n  padding: number;\n  shouldFlip: boolean;\n  boundaryElement: HTMLElement;\n  offset: number;\n  crossOffset: number;\n  shouldOverlapWithTrigger: boolean;\n}\n\nexport interface PositionResult {\n  position?: Position;\n  arrowOffsetLeft?: number;\n  arrowOffsetTop?: number;\n  maxHeight?: number;\n  placement: PlacementAxis;\n}\n\nconst AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left',\n};\n\nconst FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left',\n};\n\nconst CROSS_AXIS = {\n  top: 'left',\n  left: 'top',\n};\n\nconst AXIS_SIZE = {\n  top: 'height',\n  left: 'width',\n};\n\nconst PARSED_PLACEMENT_CACHE = {};\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\nfunction getContainerDimensions(containerNode: Element): Dimensions {\n  let width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  let scroll: Position = {};\n\n  if (containerNode.tagName === 'BODY') {\n    width = visualViewport?.width ?? document.documentElement.clientWidth;\n    height = visualViewport?.height ?? document.documentElement.clientHeight;\n\n    scroll.top =\n      getScrollTop(ownerDocument(containerNode).documentElement) ||\n      getScrollTop(containerNode);\n    scroll.left =\n      getScrollLeft(ownerDocument(containerNode).documentElement) ||\n      getScrollLeft(containerNode);\n  } else {\n    ({ width, height, top, left } = getOffset(containerNode));\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n\n  return { width, height, scroll, top, left };\n}\n\nfunction getScroll(node: HTMLElement): Offset {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight,\n  };\n}\n\nfunction getDelta(\n  axis: Axis,\n  offset: number,\n  size: number,\n  containerDimensions: Dimensions,\n  padding: number\n) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[AXIS_SIZE[axis]];\n\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\n\nfunction getMargins(node: HTMLElement): Position {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0,\n  };\n}\n\nfunction parsePlacement(input: Placement): ParsedPlacement {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n\n  let [placement, crossPlacement] = input.split(' ');\n  let axis: Axis = AXIS[placement] || 'right';\n  let crossAxis: Axis = CROSS_AXIS[axis];\n\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n\n  let size = AXIS_SIZE[axis];\n  let crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction computePosition(\n  childOffset: Offset,\n  boundaryDimensions: Dimensions,\n  overlaySize: Offset,\n  placementInfo: ParsedPlacement,\n  offset: number,\n  crossOffset: number,\n  containerOffsetWithBoundary: Offset,\n  isContainerPositioned: boolean\n) {\n  let {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  } = placementInfo;\n  let position: Position = {};\n\n  // button position\n  position[crossAxis] = childOffset[crossAxis];\n\n  if (crossPlacement === 'center') {\n    //  + (button size / 2) - (overlay size / 2)\n    // at this point the overlay center should match the button center\n    position[crossAxis] +=\n      (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    //  + (button size) - (overlay size)\n    // at this point the overlay bottom should match the button bottom\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  } /* else {\n    the overlay top should match the button top\n  } */\n  // add the crossOffset from props\n  position[crossAxis] += crossOffset;\n\n  // this is button center position - the overlay size + half of the button to align bottom of overlay with button center\n  let minViablePosition =\n    childOffset[crossAxis] +\n    childOffset[crossSize] / 2 -\n    overlaySize[crossSize];\n  // this is button position of center, aligns top of overlay with button center\n  let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;\n\n  // clamp it into the range of the min/max positions\n  position[crossAxis] = Math.min(\n    Math.max(minViablePosition, position[crossAxis]),\n    maxViablePosition\n  );\n\n  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.\n  if (placement === axis) {\n    // If the container is positioned (non-static), then we use the container's actual\n    // height, as `bottom` will be relative to this height.  But if the container is static,\n    // then it can only be the `document.body`, and `bottom` will be relative to _its_\n    // container, which should be as large as boundaryDimensions.\n    const containerHeight = isContainerPositioned\n      ? containerOffsetWithBoundary[size]\n      : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(\n      containerHeight - childOffset[axis] + offset\n    );\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n\n  return position;\n}\n\nfunction getMaxHeight(\n  position: Position,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number\n) {\n  return position.top != null\n    ? // We want the distance between the top of the overlay to the bottom of the boundary\n      Math.max(\n        0,\n        boundaryDimensions.height +\n          boundaryDimensions.top +\n          boundaryDimensions.scroll.top - // this is the bottom of the boundary\n          (containerOffsetWithBoundary.top + position.top) - // this is the top of the overlay\n          (margins.top + margins.bottom + padding) // save additional space for margin and padding\n      )\n    : // We want the distance between the top of the trigger to the top of the boundary\n      Math.max(\n        0,\n        childOffset.top +\n          containerOffsetWithBoundary.top - // this is the top of the trigger\n          (boundaryDimensions.top + boundaryDimensions.scroll.top) - // this is the top of the boundary\n          (margins.top + margins.bottom + padding) // save additional space for margin and padding\n      );\n}\n\nfunction getAvailableSpace(\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number,\n  placementInfo: ParsedPlacement\n) {\n  let { placement, axis, size } = placementInfo;\n  if (placement === axis) {\n    return Math.max(\n      0,\n      childOffset[axis] -\n        boundaryDimensions[axis] -\n        boundaryDimensions.scroll[axis] +\n        containerOffsetWithBoundary[axis] -\n        margins[axis] -\n        margins[FLIPPED_DIRECTION[axis]] -\n        padding\n    );\n  }\n\n  return Math.max(\n    0,\n    boundaryDimensions[size] +\n      boundaryDimensions[axis] +\n      boundaryDimensions.scroll[axis] -\n      containerOffsetWithBoundary[axis] -\n      childOffset[axis] -\n      childOffset[size] -\n      margins[axis] -\n      margins[FLIPPED_DIRECTION[axis]] -\n      padding\n  );\n}\n\nexport function calculatePositionInternal(\n  placementInput: Placement,\n  childOffset: Offset,\n  overlaySize: Offset,\n  scrollSize: Offset,\n  margins: Position,\n  padding: number,\n  flip: boolean,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  offset: number,\n  crossOffset: number,\n  isContainerPositioned: boolean,\n  shouldOverlapWithTrigger: boolean\n): PositionResult {\n  let placementInfo = parsePlacement(placementInput);\n  let {\n    size,\n    crossAxis,\n    crossSize,\n    placement,\n    crossPlacement,\n    axis,\n  } = placementInfo;\n  let position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    offset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n\n  let normalizedOffset = offset;\n  let space = getAvailableSpace(\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding + offset,\n    placementInfo\n  );\n\n  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = parsePlacement(\n      `${FLIPPED_DIRECTION[placement]} ${crossPlacement}` as Placement\n    );\n    let flippedPosition = computePosition(\n      childOffset,\n      boundaryDimensions,\n      overlaySize,\n      flippedPlacementInfo,\n      offset,\n      crossOffset,\n      containerOffsetWithBoundary,\n      isContainerPositioned\n    );\n    let flippedSpace = getAvailableSpace(\n      boundaryDimensions,\n      containerOffsetWithBoundary,\n      childOffset,\n      margins,\n      padding + offset,\n      flippedPlacementInfo\n    );\n\n    // If the available space for the flipped position is greater than the original available space, flip.\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n\n  let delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let maxHeight = getMaxHeight(\n    position,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding\n  );\n\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n\n  position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    normalizedOffset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n  delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let arrowPosition: Position = {};\n  arrowPosition[crossAxis] =\n    childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] =\n      position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement,\n  };\n}\n\n/**\n * Determines where to place the overlay with regards to the target and the position of an optional indicator.\n */\nexport function calculatePosition(opts: PositionOpts): PositionResult {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    shouldOverlapWithTrigger,\n  } = opts;\n\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === 'BODY';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned =\n    !!containerPositionStyle && containerPositionStyle !== 'static';\n  let childOffset: Offset = isBodyContainer\n    ? getOffset(targetNode)\n    : getPosition(targetNode, container);\n\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n\n  let overlaySize: Offset = getOffset(overlayNode);\n  const matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  const transform = matrix;\n  const regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  const matches = transform.match(regex);\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n\n  let margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n\n  let scrollSize = getScroll(scrollNode);\n  let boundaryDimensions = getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary: Offset =\n    boundaryElement.tagName === 'BODY'\n      ? getOffset(container)\n      : getPosition(container, boundaryElement);\n\n  return calculatePositionInternal(\n    placement,\n    childOffset,\n    overlaySize,\n    scrollSize,\n    margins,\n    padding,\n    shouldFlip,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    offset,\n    crossOffset,\n    isContainerPositioned,\n    shouldOverlapWithTrigger\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}